version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@4.0.1
  aws-ecs: circleci/aws-ecs@0.0.8


workflows:
  build_test_deploy:
    jobs:
      - build_test

      # push new Docker image to Docker Hub
      - dockerhub_build_and_push:
          requires:
            - build_test
          filters:
            branches:
              only:
                - master


      # push new Docker image to ECS
      - aws-ecr/build_and_push_image:
          repo: pybot
          tag: '${CIRCLE_BRANCH}'
          dockerfile: docker/Dockerfile
          requires:
            - build_test
          filters:
            branches:
              only:
                - staging
                - master

      # Update ECS task and service, then replace the current one
      - aws-ecs/deploy-service-update:
          family: 'pybot-${CIRCLE_BRANCH}'
          service-name: 'pybot-svc-${CIRCLE_BRANCH}'
          cluster-name: 'python-oc-services'
          container-image-name-updates: 'container=pybot,tag=${CIRCLE_BRANCH}'
          verify-revision-is-deployed: true
          requires:
            - aws-ecr/build_and_push_image
          filters:
            branches:
              only:
                - master
                - staging

jobs:
  build_test:
    docker:
      - image: circleci/python:3.7.1
        environment: # environment variables for primary container
          PIPENV_VENV_IN_PROJECT: true

    steps:
      - checkout
      - run: sudo chown -R circleci:circleci /usr/local/bin

      - run: sudo chown -R circleci:circleci /usr/local/lib/python3.7/site-packages

      - restore_cache:  # ensure this step occurs *before* installing dependencies
          keys:
            - v1-dependencies-{{ checksum "poetry.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: Installing dependencies
          command: |
            sudo pip install poetry
            poetry install

      - save_cache:
          key: v1-dependencies-{{ checksum "poetry.lock" }}
          paths:
            - "/home/circleci/.cache/pypoetry/virtualenvs"
            - ".venv"

      # Run tests
      - run:
          name: Run Tests
          command: |
            mkdir test-results
            poetry run pytest --junitxml=test-results/pytest/results.xml

      - store_test_results:
          path: test-results

  dockerhub_build_and_push:
    docker:
      - image: circleci/python:3.7.1

    steps:
      - checkout

      - setup_remote_docker:
          docker_layer_caching: true

      - run:
          name: Build and push to DockerHub
          command: |
            echo ${DOCKER_HUB_PASSWORD} | docker login -u ${DOCKER_HUB_USERNAME} --password-stdin

            docker build -f docker/Dockerfile  \
                    -t operationcode/pybot:${CIRCLE_BUILD_NUM} \
                    -t operationcode/pybot:latest .

            docker push operationcode/pybot:latest
            docker push operationcode/pybot:${CIRCLE_BUILD_NUM}
